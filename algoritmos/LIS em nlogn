#include <bits/stdc++.h>
using namespace std;

vector<int> vet; // vetor que conterá a sequencia de inteiros
vector<int> I;   // vetor auxiliar crescente que contem os lowerbounds de cada elemento de vet
const int inf = 0x3f3f3f3f;
int lis(int n){
	I.push_back(-inf);
	int llength = 0; // tamanho da lis
	for (int i = 0; i < n; ++i)
	{
		auto it = lower_bound(I.begin(), I.end(), vet[i]);
		/* Se o i-ésimo elemento de vet possui um lower_bound (o menor entre os numeros maiores ou iguais a vet[i]), 
		esse deve ser substituido pelo seu lower_bound
		*/
		if(it != I.end()) *it = vet[i]; 
		// caso contrario, esse elemento deve ser adicionado ao fim do vetor, e a lis será aumentada
		else {
			I.push_back(vet[i]);
			llength++;
		}
		/*ilustrando o if acima:
		I: -inf | 4 | 6 | 7
		vet[i] é 3, portanto, ele possui um lowerbound em I, que é 4 (o menor dentre os maiores que 3)
		dessa forma, o vetor ficará
		I: -inf | 3 | 6 | 7
		Digamos agora que vet[i] é 8, que nao possui lowerbound em I, logo o vetor ficaria
		I: -inf | 3 | 6 | 7 | 8
		e a nova lis seria 4 (nao consideremos o -inf, ele so eh utilizado no comeco para que o primeiro elemento
		nao ache lowerbound, visto que -inf será menor que qualquer numero inteiro procurado)
		*/
	}
	return llength;
}

int main(){
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	for (int i = 0; i < n; ++i)
	{
		int x;
		cin>>x;
		vet.push_back(x);
	}

	cout << lis(n);

	return 0;
}
